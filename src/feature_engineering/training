from src.models.hyper_parameters import imputation_params
from imblearn.over_sampling import SMOTE
from sklearn.preprocessing import OneHotEncoder
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.metrics import  accuracy_score, mean_squared_error,f1_score,roc_auc_score
from sklearn.impute import SimpleImputer
import pandas as pd
import numpy as np

def eval_model(model,features_valid,target_valid):
    best_random = model.best_estimator_
    random_prediction = best_random.predict(features_valid)
    prob = best_random.predict_proba(features_valid)[:, 1]
    random_accuracy=accuracy_score(target_valid,random_prediction)
    random_f1_score=f1_score(target_valid,random_prediction)
    random_roc_auc=roc_auc_score(target_valid,prob)
    print("Accuracy:",random_accuracy)
    print('f1: ',random_f1_score)
    print('ROC_AUC: ',random_roc_auc)
    print('Best_Model: ',best_random)
    return best_random,random_accuracy,random_f1_score,random_roc_auc

def training_imp_model(features_train,target_train,features_valid,target_valid,type,pipeline,param_grid,X_test=None):
    '''A model created to impute linear and logistic values if the
      respective metric aligns with the threshold.'''
    
    if type=='linreg':
        print('Model: Linear')
        grid_search = GridSearchCV(pipeline, param_grid, cv=2, scoring='neg_root_mean_squared_error', n_jobs=-1, verbose=2)
        grid_search.fit(features_train,target_train)
        print(grid_search.best_params_)
        y_pred = grid_search.predict(features_valid)
        # rmse = root_mean_squared_error(y_val,y_pred)
        rmse = np.sqrt(mean_squared_error(target_valid,y_pred))
        print("RMSE: ", rmse)
        
    elif type=='logreg':
            print('Model: Logistic')
            #smote = SMOTE(random_state=1234)
            #X_train_resampled, y_train_resampled = smote.fit_resample(X_train,y_train) 

            grid_search = GridSearchCV(pipeline, param_grid, cv=2, scoring='f1', n_jobs=-1, verbose=2)
            grid_search.fit(features_train,target_valid)
            print(grid_search.best_params_)
            print(eval_model(grid_search,features_valid,target_valid))
            return eval_model(grid_search,features_valid,target_valid)
    else:
        print('No model has been selected')
        return